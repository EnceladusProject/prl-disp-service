#!/usr/bin/env python

import os
import sys
import ConfigParser
import time
import subprocess

file_path = os.path.split(os.path.abspath(__file__))[0]
if file_path == '':
	file_path = os.path.abspath(os.path.getcwd())

cfg = ConfigParser.ConfigParser()
cfg.readfp(open('Build/Build.cfg'))
noct = False

if not os.path.exists( '/usr/include/vzctl/libvzctl.h' ):
	print 'Warning: libvzctl-devel packages is not installed'
	noct = True

if not os.path.exists( '/usr/include/ploop/libploop.h' ):
	print 'Warning: ploop-devel packages is not installed'
	noct = True

try:
	fd = open('Build/Build.pri', 'w')
except IOErrore:
	print 'Failed to open "Build/Build.pri"'
	sys.exit(1)

fd.write("DEFINES += PRL_PROD_SERVER=1\n")
fd.write('DEFINES += _LIN_\n')
if not noct:
	fd.write('DYN_VZLIB = TRUE\n')


fd.write('\n')
fd.write('# Product name\n')
fd.write('PRODUCT = server\n')

fd.write( '\n' )
fd.write( '# SDK library versions\n' )
fd.write( 'SDK_VER_MAJ = "%s"\n' % cfg.getint('sdk', 'major'))
fd.write( 'SDK_VER_MIN = "%s"\n' % cfg.getint('sdk', 'minor'))

fd.write('PREFIX = "%s"' % cfg.get('Build.cfg', 'install_prefix'))

fd.close()


time_fmt = "%a, %d %b %Y %H:%M:%S"
v_date = cfg.get("Build.cfg", "version_date")
v_ts = int(time.mktime(time.strptime(v_date, time_fmt)))

fd = open('Build/Current-gen.ver', 'w')

fd.write("""/* generated by Gen.py; DO NOT EDIT */

#define VER_FULL_BUILD_NUMBER_RELEASE_MAJOR %(version_major)d
#define VER_FULL_BUILD_NUMBER_RELEASE_MINOR %(version_minor)d
#define VER_FULL_BUILD_NUMBER_RELEASE_PATCH %(version_patch)d
#define VER_FULL_BUILD_NUMBER_VERSION_MAJOR %(version_build)d
#define VER_FULL_BUILD_NUMBER_VERSION_MINOR %(version_revision)d
#define VER_BUILD_TIMESTAMP %(version_timestamp)d
#define VER_SPECIAL_BUILD_STR "%(version_date)s"
""" % {'version_major': cfg.getint('SumerBM', 'version_major'),
	'version_minor': cfg.getint('SumerBM', 'version_minor'),
	'version_patch': cfg.getint('SumerBM', 'version_patch'),
	'version_build': cfg.getint('Build.cfg', 'version_build'),
	'version_revision': cfg.getint('Build.cfg', 'version_revision'),
	'version_date': v_date,
	'version_timestamp': v_ts})

fd.write('#define VER_COPYRIGHT_YEAR %d\n' % time.localtime().tm_year)
fd.write('#define VER_COPYRIGHT_YEAR %d\n' % time.localtime().tm_year)
fd.close()


xmlmodel_py = os.path.join(file_path, 'XmlModel', 'XmlModel.py')
subprocess.check_call(['python', xmlmodel_py, '--force', '--qmake="qmake"'])

